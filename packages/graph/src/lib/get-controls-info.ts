import {
  FORCE_SETTINGS,
  GRAPH_SETTINGS,
  LINK_OPTIONS,
  NODE_OPTIONS,
} from "@/module/GraphCanvas/constants";
import type {
  ForceSettingsInterface,
  GraphSettingsInterface,
  LinkOptionsInterface,
  NodeOptionsInterface,
} from "../module/GraphCanvas";
import type { GraphSettingsInputInterface } from "../types/controls";

export function getForceControls<
  NodeData extends Record<string, unknown>,
  LinkData extends Record<string, unknown>,
>(keys?: (keyof ForceSettingsInterface<NodeData, LinkData>)[]) {
  const FORCE_CONTROLS: GraphSettingsInputInterface<
    keyof ForceSettingsInterface<NodeData, LinkData>
  >[] = [
    {
      id: "centerStrength",
      initialValue: FORCE_SETTINGS.centerStrength,
      label: "Граница центра",
      max: 1,
      min: 0,
      step: 0.01,
      type: "range",
    },
    {
      id: "collideStrength",
      initialValue: FORCE_SETTINGS.collideStrength,
      label: "Сила отталкивания",
      max: 1,
      min: 0,
      step: 0.01,
      type: "range",
    },
    {
      id: "collideAdditionalRadius",
      initialValue: FORCE_SETTINGS.collideAdditionalRadius,
      label: "Радиус отталкивания",
      max: 300,
      min: 0,
      step: 0.1,
      type: "range",
    },
    {
      id: "collideIterations",
      initialValue: FORCE_SETTINGS.collideIterations,
      label: "Итерации отталкивания",
      max: 10,
      min: 0,
      step: 1,
      type: "range",
    },
    {
      id: "chargeStrength",
      initialValue:
        typeof FORCE_SETTINGS.chargeStrength === "number" ? FORCE_SETTINGS.chargeStrength : 0,
      label: "Гравитация",
      max: 0,
      min: -300,
      step: 0.1,
      type: "range",
    },
    {
      type: "range",
      id: "xForce",
      min: 0,
      max: 1,
      step: 0.01,
      label: "Граница X",
      initialValue: typeof FORCE_SETTINGS.xForce === "number" ? FORCE_SETTINGS.xForce : 0,
    },
    {
      type: "range",
      id: "yForce",
      min: 0,
      max: 1,
      step: 0.01,
      label: "Граница Y",
      initialValue: typeof FORCE_SETTINGS.yForce === "number" ? FORCE_SETTINGS.yForce : 0,
    },
    {
      type: "range",
      id: "xStrength",
      min: 0,
      max: 1,
      step: 0.01,
      label: "Гравитация X",
      initialValue: typeof FORCE_SETTINGS.xStrength === "number" ? FORCE_SETTINGS.xStrength : 0,
    },
    {
      type: "range",
      id: "yStrength",
      min: 0,
      max: 1,
      step: 0.01,
      label: "Гравитация Y",
      initialValue: typeof FORCE_SETTINGS.yStrength === "number" ? FORCE_SETTINGS.yStrength : 0,
    },
    {
      type: "range",
      id: "linkStrength",
      min: 0,
      max: 1,
      step: 0.01,
      label: "Натяжение связей",
      initialValue:
        typeof FORCE_SETTINGS.linkStrength === "number" ? FORCE_SETTINGS.linkStrength : 0,
    },
    {
      type: "range",
      id: "linkDistance",
      min: 0,
      max: 300,
      step: 0.1,
      label: "Расстояние связей",
      initialValue:
        typeof FORCE_SETTINGS.linkDistance === "number" ? FORCE_SETTINGS.linkDistance : 30,
    },
    {
      id: "collideOn",
      type: "checkbox",
      initialValue: FORCE_SETTINGS.collideOn,
      label: "Отталкивание",
    },
  ];

  return keys ? FORCE_CONTROLS.filter((control) => keys.includes(control.id)) : FORCE_CONTROLS;
}

export function getGraphControls<NodeData extends Record<string, unknown>>(
  keys?: (keyof GraphSettingsInterface<NodeData>)[],
) {
  const GRAPH_CONTROLS: GraphSettingsInputInterface<keyof GraphSettingsInterface<NodeData>>[] = [
    {
      id: "highlightSizingAdditional",
      initialValue: GRAPH_SETTINGS.highlightSizingAdditional,
      max: 10,
      min: 0.1,
      step: 0.01,
      type: "range",
      label: "Дополнительный размер при анимации",
    },
    {
      id: "highlightColorFadingMin",
      initialValue: GRAPH_SETTINGS.highlightColorFadingMin,
      max: 1,
      min: 0.01,
      step: 0.01,
      type: "range",
      label: "Граница затухания цвета",
    },
    {
      id: "highlightTextShiftXAdditional",
      initialValue: GRAPH_SETTINGS.highlightTextShiftXAdditional,
      max: 50,
      min: 0,
      step: 0.1,
      type: "range",
      label: "Смещение текста по X при анимации",
    },
    {
      id: "highlightTextShiftYAdditional",
      initialValue: GRAPH_SETTINGS.highlightTextShiftYAdditional,
      max: 50,
      min: 0,
      step: 0.1,
      type: "range",
      label: "Смещение текста по Y при анимации",
    },
    {
      id: "highlightTextSizingAdditional",
      initialValue: GRAPH_SETTINGS.highlightTextSizingAdditional,
      max: 10,
      min: 0.1,
      step: 0.1,
      type: "range",
      label: "Увеличение текста при анимации",
    },
    {
      id: "highlightTextWeightAdditional",
      initialValue: GRAPH_SETTINGS.highlightTextWeightAdditional,
      max: 1000,
      min: 0,
      step: 100,
      type: "range",
      label: "Увеличение жирности текста при анимации",
    },
    {
      id: "highlightTextWidthAdditional",
      initialValue: GRAPH_SETTINGS.highlightTextWidthAdditional,
      max: 100,
      min: 0,
      step: 0.1,
      type: "range",
      label: "Увеличение ширины текста при анимации",
    },
    {
      id: "highlightTextFadingMin",
      initialValue: GRAPH_SETTINGS.highlightTextFadingMin,
      max: 1,
      min: 0,
      step: 0.01,
      type: "range",
      label: "Граница затухания текста при анимации",
    },
    {
      id: "highlightLinkFadingMin",
      initialValue: GRAPH_SETTINGS.highlightLinkFadingMin,
      max: 1,
      min: 0,
      step: 0.01,
      type: "range",
      label: "Граница затухания связи при анимации",
    },
    {
      id: "highlightFadingMin",
      initialValue: GRAPH_SETTINGS.highlightFadingMin,
      max: 1,
      min: 0,
      step: 0.01,
      type: "range",
      label: "Граница затухания ноды при анимации",
    },
    {
      id: "highlightArrowFadingMin",
      initialValue: GRAPH_SETTINGS.highlightArrowFadingMin,
      max: 1,
      min: 0,
      step: 0.01,
      type: "range",
      label: "Граница затухания стрелки при анимации",
    },
    {
      id: "highlightDownStep",
      initialValue: GRAPH_SETTINGS.highlightDownStep,
      max: 1,
      min: 0.01,
      step: 0.01,
      type: "range",
      label: "Скорость отмены анимации",
    },
    {
      id: "highlightUpStep",
      initialValue: GRAPH_SETTINGS.highlightUpStep,
      max: 1,
      min: 0.01,
      step: 0.01,
      type: "range",
      label: "Скорость применения анимации",
    },
    {
      id: "nodeRadiusInitial",
      initialValue: GRAPH_SETTINGS.nodeRadiusInitial,
      max: 50,
      min: 0.1,
      step: 0.1,
      type: "range",
      label: "Изначальный радиус ноды",
    },
    {
      id: "nodeRadiusCoefficient",
      initialValue: GRAPH_SETTINGS.nodeRadiusCoefficient,
      max: 100,
      min: 0.1,
      step: 0.1,
      type: "range",
      label: "Количество связей для увеличения радиуса",
    },
    {
      id: "nodeRadiusFactor",
      initialValue: GRAPH_SETTINGS.nodeRadiusFactor,
      max: 50,
      min: 0.1,
      step: 0.1,
      type: "range",
      label: "Коэффициент увеличения радиуса",
    },
    {
      id: "highlightOnlyRoot",
      type: "checkbox",
      initialValue: GRAPH_SETTINGS.highlightOnlyRoot,
      label: "Дополнительная анимация только главное цели",
    },
    {
      id: "stickAfterDrag",
      type: "checkbox",
      initialValue: GRAPH_SETTINGS.stickAfterDrag,
      label: "Фиксировании ноды после перетаскивания",
    },
    {
      id: "highlightByHover",
      type: "checkbox",
      initialValue: GRAPH_SETTINGS.highlightByHover,
      label: "Анимации при наведении",
    },
    {
      id: "nodeRadiusFlexible",
      type: "checkbox",
      initialValue: GRAPH_SETTINGS.nodeRadiusFlexible,
      label: "Гибкий радиус ноды",
    },
  ];

  return keys ? GRAPH_CONTROLS.filter((control) => keys.includes(control.id)) : GRAPH_CONTROLS;
}

export function getNodeControls<
  NodeData extends Record<string, unknown>,
  LinkData extends Record<string, unknown>,
>(keys?: (keyof NodeOptionsInterface<NodeData, LinkData>)[]) {
  const NODE_CONTROLS: GraphSettingsInputInterface<
    keyof NodeOptionsInterface<NodeData, LinkData>
  >[] = [
    {
      id: "alpha",
      type: "range",
      max: 1,
      min: 0,
      step: 0.1,
      label: "Прозрачность",
      initialValue: NODE_OPTIONS.alpha,
    },

    {
      id: "radius",
      type: "range",
      max: 50,
      min: 1,
      step: 1,
      label: "Радиус",
      initialValue: NODE_OPTIONS.radius,
    },
    {
      id: "borderWidth",
      type: "range",
      max: 5,
      min: 0,
      step: 0.1,
      label: "Толщина границы",
      initialValue: NODE_OPTIONS.borderWidth,
    },
    {
      id: "borderColor",
      type: "color",
      initialValue: "#000000FF",
      label: "Цвет границы",
    },
    {
      id: "color",
      type: "color",
      initialValue: "#000000FF",
      label: "Цвет",
    },
    {
      id: "textAlpha",
      type: "range",
      max: 1,
      min: 0,
      step: 0.1,
      label: "Прозрачность текста",
      initialValue: NODE_OPTIONS.textAlpha,
    },
    {
      id: "textWidth",
      type: "range",
      max: 200,
      min: 5,
      step: 1,
      label: "Ширина текста",
      initialValue: NODE_OPTIONS.textWidth,
    },
    {
      id: "textShiftX",
      type: "range",
      max: 100,
      min: 0,
      step: 0.1,
      label: "Смещение X текста",
      initialValue: NODE_OPTIONS.textShiftX,
    },
    {
      id: "textShiftY",
      type: "range",
      max: 100,
      min: 0,
      step: 0.1,
      label: "Смещение Y текста",
      initialValue: 4,
    },
    {
      id: "textWeight",
      type: "range",
      max: 1000,
      min: 100,
      step: 100,
      label: "Жирность текста",
      initialValue: NODE_OPTIONS.textWeight,
    },
    {
      id: "textGap",
      type: "range",
      max: 30,
      min: 0,
      step: 0.1,
      label: "Расстояние между строками",
      initialValue: NODE_OPTIONS.textGap,
    },
    {
      id: "highlightFading",
      type: "checkbox",
      initialValue: NODE_OPTIONS.highlightFading,
      label: "Анимация затухания",
    },
    {
      id: "highlightColor",
      type: "checkbox",
      initialValue: NODE_OPTIONS.highlightColor,
      label: "Анимация затухания цвета",
    },
    {
      id: "highlightSizing",
      type: "checkbox",
      initialValue: NODE_OPTIONS.highlightSizing,
      label: "Анимация размера",
    },
    {
      id: "highlightTextFading",
      type: "checkbox",
      initialValue: NODE_OPTIONS.highlightTextFading,
      label: "Анимация затухания текста",
    },
    {
      id: "highlightTextSizing",
      type: "checkbox",
      initialValue: NODE_OPTIONS.highlightTextSizing,
      label: "Анимация размера текста",
    },
  ];

  return keys ? NODE_CONTROLS.filter((control) => keys.includes(control.id)) : NODE_CONTROLS;
}

export function getLinkControls<
  NodeData extends Record<string, unknown>,
  LinkData extends Record<string, unknown>,
>(keys?: (keyof LinkOptionsInterface<NodeData, LinkData>)[]) {
  const LINK_CONTROLS: GraphSettingsInputInterface<
    keyof LinkOptionsInterface<NodeData, LinkData>
  >[] = [
    {
      id: "alpha",
      type: "range",
      max: 1,
      min: 0,
      step: 0.1,
      label: "Прозрачность",
      initialValue: LINK_OPTIONS.alpha,
    },
    {
      id: "width",
      type: "range",
      max: 10,
      min: 0.1,
      step: 0.1,
      label: "Толщина",
      initialValue: 0.1,
    },
    {
      id: "arrowAlpha",
      type: "range",
      max: 1,
      min: 0,
      step: 0.1,
      label: "Прозрачность стрелки",
      initialValue: LINK_OPTIONS.arrowAlpha,
    },
    {
      id: "arrowSize",
      type: "range",
      max: 10,
      min: 0.1,
      step: 0.1,
      label: "Размер стрелки",
      initialValue: LINK_OPTIONS.arrowSize,
    },
    {
      id: "particleAlpha",
      type: "range",
      max: 1,
      min: 0,
      step: 0.1,
      label: "Прозрачность частиц",
      initialValue: LINK_OPTIONS.particleAlpha,
    },
    {
      id: "particleRadius",
      type: "range",
      max: 10,
      min: 0.1,
      step: 0.1,
      label: "Радиус частиц",
      initialValue: LINK_OPTIONS.particleRadius,
    },
    {
      id: "particleCount",
      type: "range",
      max: 20,
      min: 1,
      step: 1,
      label: "Количество частиц",
      initialValue: LINK_OPTIONS.particleCount,
    },
    {
      id: "particleSteps",
      type: "range",
      max: 200,
      min: 1,
      step: 1,
      label: "Количество кадров у частиц",
      initialValue: LINK_OPTIONS.particleSteps,
    },
    {
      id: "color",
      type: "color",
      initialValue: "#000000FF",
      label: "Цвет",
    },
    {
      id: "arrowColor",
      type: "color",
      initialValue: "#000000FF",
      label: "Цвет стрелки",
    },
    {
      id: "particleColor",
      type: "color",
      initialValue: "#000000FF",
      label: "Цвет частиц",
    },
    {
      id: "highlightFading",
      type: "checkbox",
      label: "Анимация Затухания",
      initialValue: LINK_OPTIONS.highlightFading,
    },
    {
      id: "pretty",
      type: "checkbox",
      label: "Обсчет соединения",
      initialValue: LINK_OPTIONS.pretty,
    },
    {
      id: "arrow",
      type: "checkbox",
      label: "Стрелка",
      initialValue: LINK_OPTIONS.arrow,
    },
    {
      id: "arrowHighlightFading",
      type: "checkbox",
      label: "Анимация затухания стрелки",
      initialValue: LINK_OPTIONS.arrowHighlightFading,
    },
    {
      id: "arrowReverseAppear",
      type: "checkbox",
      label: "Появление стрелки при анимации",
      initialValue: LINK_OPTIONS.arrowReverseAppear,
    },
  ];

  return keys ? LINK_CONTROLS.filter((control) => keys.includes(control.id)) : LINK_CONTROLS;
}
