import type {
  NodeOptionsLabelInterface,
  NodeOptionsNodeInterface,
  NodeOptionsTextInterface,
  NodeSettingsInterface,
} from "@/module/GraphCanvas";
import { NODE_OPTIONS, NODE_SETTINGS } from "@/module/GraphCanvas/constants";
import type { GraphSettingsInputInterface } from "@/types";

export const NODE_SETTINGS_CONTROLS: GraphSettingsInputInterface<
  keyof Omit<
    Required<NodeSettingsInterface<Record<string, unknown>, Record<string, unknown>>>,
    "options" | "idGetter"
  >
>[] = [
  {
    id: "textNodeDebug",
    type: "checkbox",
    initialValue: NODE_SETTINGS.textNodeDebug,
    label: "Отладка текстовой вершины",
  },
  {
    id: "nodeRadiusFlexible",
    type: "checkbox",
    initialValue: NODE_SETTINGS.nodeRadiusFlexible,
    label: "Гибкий радиус",
  },
  {
    id: "nodeRadiusLinkCountForStep",
    initialValue: NODE_SETTINGS.nodeRadiusLinkCountForStep,
    max: 100,
    min: 0.1,
    step: 0.1,
    type: "range",
    label: "Количество связей для увеличения линейного шага радиуса",
  },
  {
    id: "nodeRadiusIncrementByStep",
    initialValue: NODE_SETTINGS.nodeRadiusIncrementByStep,
    max: 50,
    min: 0.1,
    step: 0.1,
    type: "range",
    label: "Размер шага линейного увеличения радиуса",
  },
  {
    id: "nodeRadiusMaxLinearSteps",
    initialValue: NODE_SETTINGS.nodeRadiusMaxLinearSteps,
    max: 50,
    min: 1,
    step: 1,
    type: "range",
    label: "Максимальное число шагов линейного увеличения радиуса",
  },
  {
    id: "nodeRadiusLogFactor",
    initialValue: NODE_SETTINGS.nodeRadiusLogFactor,
    max: 50,
    min: 1,
    step: 1,
    type: "range",
    label: "Число умножаемое на логарифм от количества связей для увеличения радиуса",
  },
  {
    id: "nodeRadiusLinkCountDividerForLog",
    initialValue: NODE_SETTINGS.nodeRadiusLinkCountDividerForLog,
    max: 50,
    min: 1,
    step: 1,
    type: "range",
    label: "Делитель количества связей для вычисления логарифма увеличения радиуса.",
  },
  {
    id: "nodeSizeFlexible",
    type: "checkbox",
    initialValue: NODE_SETTINGS.nodeSizeFlexible,
    label: "Гибкий размер",
  },
  {
    id: "nodeSizeLinkCountForStep",
    initialValue: NODE_SETTINGS.nodeSizeLinkCountForStep,
    max: 100,
    min: 0.1,
    step: 0.1,
    type: "range",
    label: "Количество связей для увеличения линейного шага размера",
  },
  {
    id: "nodeSizeIncrementByStep",
    initialValue: NODE_SETTINGS.nodeSizeIncrementByStep,
    max: 50,
    min: 0.1,
    step: 0.1,
    type: "range",
    label: "Размер шага линейного увеличения размера",
  },
  {
    id: "nodeSizeMaxLinearSteps",
    initialValue: NODE_SETTINGS.nodeSizeMaxLinearSteps,
    max: 50,
    min: 1,
    step: 1,
    type: "range",
    label: "Максимальное число шагов линейного увеличения размера",
  },
  {
    id: "nodeSizeLogFactor",
    initialValue: NODE_SETTINGS.nodeSizeLogFactor,
    max: 50,
    min: 1,
    step: 1,
    type: "range",
    label: "Число умножаемое на логарифм от количества связей для увеличения размера",
  },
  {
    id: "nodeSizeLinkCountDividerForLog",
    initialValue: NODE_SETTINGS.nodeSizeLinkCountDividerForLog,
    max: 50,
    min: 1,
    step: 1,
    type: "range",
    label: "Делитель количества связей для вычисления логарифма увеличения размера.",
  },
  {
    id: "textScaleMin",
    initialValue: NODE_SETTINGS.textScaleMin,
    max: 20,
    min: 0,
    step: 0.01,
    type: "range",
    label: "Минимальная граница зума для текста",
  },
  {
    id: "textScaleMax",
    initialValue: NODE_SETTINGS.textScaleMax,
    max: 20,
    min: 0,
    step: 0.01,
    type: "range",
    label: "Максимальная граница зума для текста",
  },
  {
    id: "textSizeMin",
    initialValue: NODE_SETTINGS.textSizeMin,
    max: 20,
    min: 0,
    step: 0.01,
    type: "range",
    label: "Размер текста на минимальной границе зума",
  },
  {
    id: "textSizeMax",
    initialValue: NODE_SETTINGS.textSizeMax,
    max: 20,
    min: 0,
    step: 0.01,
    type: "range",
    label: "Размер текста на максимальной границе зума",
  },
  {
    id: "textShiftYMin",
    initialValue: NODE_SETTINGS.textShiftYMin,
    max: 20,
    min: 0,
    step: 0.01,
    type: "range",
    label: "Смещение текста по оси Y на минимальной границе зума",
  },
  {
    id: "textShiftYMax",
    initialValue: NODE_SETTINGS.textShiftYMax,
    max: 20,
    min: 0,
    step: 0.01,
    type: "range",
    label: "Смещение текста по оси Y на максимальной границе зума",
  },
];

export const NODE_OPTIONS_NODE_CONTROLS: GraphSettingsInputInterface<
  keyof NodeOptionsNodeInterface
>[] = [
  {
    id: "shape",
    type: "select",
    initialValue: NODE_OPTIONS.shape,
    label: "Форма",
    options: [
      { label: "Картинки", value: "icon" },
      { label: "Круг", value: "circle" },
      { label: "Прямоугольник", value: "square" },
      { label: "Текст", value: "text" },
    ],
  },
  {
    id: "color",
    type: "color",
    initialValue: "#000000FF",
    label: "Цвет",
  },
  {
    id: "alpha",
    type: "range",
    max: 1,
    min: 0,
    step: 0.1,
    label: "Прозрачность",
    initialValue: NODE_OPTIONS.alpha,
  },
  {
    id: "radius",
    type: "range",
    max: 50,
    min: 1,
    step: 0.1,
    label: "Радиус (только для круга)",
    initialValue: NODE_OPTIONS.radius,
  },
  {
    id: "width",
    type: "range",
    max: 50,
    min: 1,
    step: 1,
    label: "Ширина (только не для круга)",
    initialValue: NODE_OPTIONS.width,
  },
  {
    id: "height",
    type: "range",
    max: 50,
    min: 1,
    step: 1,
    label: "Высота (только не для круга)",
    initialValue: NODE_OPTIONS.height,
  },
  {
    id: "borderColor",
    type: "color",
    initialValue: "#000000FF",
    label: "Цвет границы",
  },
  {
    id: "borderWidth",
    type: "range",
    max: 5,
    min: 0,
    step: 0.1,
    label: "Толщина границы",
    initialValue: NODE_OPTIONS.borderWidth,
  },
  {
    id: "borderRadius",
    type: "range",
    max: 50,
    min: 0,
    step: 1,
    label: "Радиус границы (только не для круга)",
    initialValue: NODE_OPTIONS.borderRadius,
  },
];
export const NODE_OPTIONS_TEXT_CONTROLS: GraphSettingsInputInterface<
  keyof NodeOptionsTextInterface
>[] = [
  {
    id: "textColor",
    type: "color",
    initialValue: NODE_OPTIONS.textColor,
    label: "Цвет",
  },
  {
    id: "textSize",
    type: "range",
    max: 30,
    min: 0,
    step: 0.1,
    label: "Размер",
    initialValue: 0,
  },
  {
    id: "textAlpha",
    type: "range",
    max: 1,
    min: 0,
    step: 0.1,
    label: "Прозрачность",
    initialValue: NODE_OPTIONS.textAlpha,
  },
  {
    id: "textWidth",
    type: "range",
    max: 200,
    min: 5,
    step: 1,
    label: "Ширина",
    initialValue: NODE_OPTIONS.textWidth,
  },
  {
    id: "textShiftX",
    type: "range",
    max: 100,
    min: 0,
    step: 0.1,
    label: "Смещение по оси X",
    initialValue: NODE_OPTIONS.textShiftX,
  },
  {
    id: "textShiftY",
    type: "range",
    max: 100,
    min: 0,
    step: 0.1,
    label: "Смещение по оси Y",
    initialValue: 4,
  },
  {
    id: "textWeight",
    type: "range",
    max: 1000,
    min: 100,
    step: 100,
    label: "Жирность",
    initialValue: NODE_OPTIONS.textWeight,
  },
  {
    id: "textGap",
    type: "range",
    max: 30,
    min: 0,
    step: 0.1,
    label: "Расстояние между строками",
    initialValue: NODE_OPTIONS.textGap,
  },
];
export const NODE_OPTIONS_LABEL_CONTROLS: GraphSettingsInputInterface<
  keyof NodeOptionsLabelInterface
>[] = [
  {
    id: "labelColor",
    type: "color",
    initialValue: NODE_OPTIONS.labelColor,
    label: "Цвет",
  },
  {
    id: "labelSize",
    type: "range",
    max: 30,
    min: 0,
    step: 0.1,
    label: "Размер",
    initialValue: NODE_OPTIONS.labelSize,
  },
  {
    id: "labelAlpha",
    type: "range",
    max: 1,
    min: 0,
    step: 0.1,
    label: "Прозрачность",
    initialValue: NODE_OPTIONS.labelAlpha,
  },
  {
    id: "labelWidth",
    type: "range",
    max: 200,
    min: 5,
    step: 1,
    label: "Ширина",
    initialValue: NODE_OPTIONS.labelWidth,
  },
  {
    id: "labelWeight",
    type: "range",
    max: 1000,
    min: 100,
    step: 100,
    label: "Жирность",
    initialValue: NODE_OPTIONS.labelWeight,
  },
  {
    id: "labelGap",
    type: "range",
    max: 30,
    min: 0,
    step: 0.1,
    label: "Расстояние между строками",
    initialValue: NODE_OPTIONS.labelGap,
  },
  {
    id: "labelXPadding",
    type: "range",
    max: 30,
    min: 0,
    step: 0.1,
    label: "Отступы по оси X",
    initialValue: NODE_OPTIONS.labelXPadding,
  },
  {
    id: "labelYPadding",
    type: "range",
    max: 30,
    min: 0,
    step: 0.1,
    label: "Отступы по оси Y",
    initialValue: NODE_OPTIONS.labelYPadding,
  },
];
